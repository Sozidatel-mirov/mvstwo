// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvstwo.Model;

#nullable disable

namespace mvstwo.Migrations
{
    [DbContext(typeof(OkeiSiteContext))]
    [Migration("20240612211949_demo")]
    partial class demo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mvstwo.Model.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Image")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("isCorrect");

                    b.Property<int?>("Quest")
                        .HasColumnType("int");

                    b.Property<string>("TextAnswers")
                        .HasColumnType("text")
                        .HasColumnName("textAnswers");

                    b.HasKey("Id")
                        .HasName("PK__Answers__3213E83F4D681B91");

                    b.HasIndex("Image");

                    b.HasIndex("Quest");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("mvstwo.Model.Cok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdTeacher")
                        .HasColumnType("int")
                        .HasColumnName("idTeacher");

                    b.Property<string>("Mdk")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MDK");

                    b.Property<string>("Pm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PM");

                    b.Property<string>("Spo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SPO");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Coks__3213E83FC114849B");

                    b.HasIndex("IdTeacher");

                    b.ToTable("Coks");
                });

            modelBuilder.Entity("mvstwo.Model.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCoks")
                        .HasColumnType("int")
                        .HasColumnName("idCoks");

                    b.Property<int>("IdEom1")
                        .HasColumnType("int")
                        .HasColumnName("idEOM1");

                    b.Property<int>("IdEom2")
                        .HasColumnType("int")
                        .HasColumnName("idEOM2");

                    b.Property<int>("IdEom3")
                        .HasColumnType("int")
                        .HasColumnName("idEOM3");

                    b.HasKey("Id")
                        .HasName("PK__Content__3213E83FE512137C");

                    b.HasIndex("IdCoks");

                    b.HasIndex("IdEom1");

                    b.HasIndex("IdEom2");

                    b.HasIndex("IdEom3");

                    b.ToTable("Content", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.Eom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__EOM__3213E83F7730F09B");

                    b.ToTable("EOM", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.FreeAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdQuest")
                        .HasColumnType("int")
                        .HasColumnName("idQuest");

                    b.Property<int>("IdResults")
                        .HasColumnType("int")
                        .HasColumnName("idResults");

                    b.HasKey("Id")
                        .HasName("PK__FreeAnsw__3213E83FAFDBDDBA");

                    b.HasIndex("IdQuest");

                    b.HasIndex("IdResults");

                    b.ToTable("FreeAnswer", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Groups__3213E83F51292913");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("mvstwo.Model.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Images__3213E83F239609D5");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("mvstwo.Model.KeyWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdCoks")
                        .HasColumnType("int")
                        .HasColumnName("idCoks");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__KeyWords__3213E83FA321F4AF");

                    b.HasIndex("IdCoks");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("mvstwo.Model.Lection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Eom")
                        .HasColumnType("int")
                        .HasColumnName("eom");

                    b.Property<int?>("Icon")
                        .HasColumnType("int")
                        .HasColumnName("icon");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Lection__3213E83F38C8FCFC");

                    b.HasIndex("Eom");

                    b.HasIndex("Icon");

                    b.ToTable("Lection", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.LectionBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdLection")
                        .HasColumnType("int")
                        .HasColumnName("idLection");

                    b.Property<int?>("Image")
                        .HasColumnType("int");

                    b.Property<string>("Textlection")
                        .HasColumnType("text")
                        .HasColumnName("textlection");

                    b.Property<int?>("Video")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__LectionB__3213E83F6D724FF2");

                    b.HasIndex("IdLection");

                    b.HasIndex("Image");

                    b.HasIndex("Video");

                    b.ToTable("LectionBlock", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Image")
                        .HasColumnType("int");

                    b.Property<int>("Test")
                        .HasColumnType("int");

                    b.Property<string>("TextQuest")
                        .HasColumnType("text")
                        .HasColumnName("textQuest");

                    b.HasKey("Id")
                        .HasName("PK__Quest__3213E83F21C0C0DE");

                    b.HasIndex("Image");

                    b.HasIndex("Test");

                    b.ToTable("Quest", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.ResultsTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Eom")
                        .HasColumnType("int")
                        .HasColumnName("eom");

                    b.Property<int>("Estimation")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("QuantityCorrectAnswer")
                        .HasColumnType("int");

                    b.Property<int>("QuantityUnCorrectAnswer")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimePeform")
                        .HasColumnType("time");

                    b.HasKey("Id")
                        .HasName("PK__ResultsT__3213E83FCC46D9D8");

                    b.HasIndex("Eom");

                    b.HasIndex("IdUser");

                    b.ToTable("ResultsTests");
                });

            modelBuilder.Entity("mvstwo.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3213E83F4E18E09C");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("mvstwo.Model.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("PK__Test__3213E83F12C0B495");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.TestAccordBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FirstImage")
                        .HasColumnType("int")
                        .HasColumnName("firstImage");

                    b.Property<string>("FirstPhrase")
                        .HasColumnType("text")
                        .HasColumnName("firstPhrase");

                    b.Property<int?>("SecondImage")
                        .HasColumnType("int");

                    b.Property<string>("SecondPhrase")
                        .HasColumnType("text");

                    b.Property<int>("Test")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TestAcco__3213E83F5F57B785");

                    b.HasIndex("FirstImage");

                    b.HasIndex("SecondImage");

                    b.HasIndex("Test");

                    b.ToTable("TestAccordBlock", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.TestBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Image")
                        .HasColumnType("int");

                    b.Property<int>("Test")
                        .HasColumnType("int");

                    b.Property<string>("Textlection")
                        .HasColumnType("text")
                        .HasColumnName("textlection");

                    b.Property<int?>("Video")
                        .HasColumnType("int");

                    b.Property<int>("VirtualTrainer")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TestBloc__3213E83FDADDCA78");

                    b.HasIndex("Image");

                    b.HasIndex("Test");

                    b.HasIndex("Video");

                    b.HasIndex("VirtualTrainer");

                    b.ToTable("TestBlock", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.TestSequenceBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Image")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Phrase")
                        .HasColumnType("text");

                    b.Property<int>("Test")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TestSequ__3213E83FC6F5D876");

                    b.HasIndex("Image");

                    b.HasIndex("Test");

                    b.ToTable("TestSequenceBlock", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.Trainerlection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Image")
                        .HasColumnType("int");

                    b.Property<string>("Textlection")
                        .HasColumnType("text")
                        .HasColumnName("textlection");

                    b.Property<int?>("Video")
                        .HasColumnType("int");

                    b.Property<int>("VirtualTrainer")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Trainerl__3213E83FE2ABAE24");

                    b.HasIndex("Image");

                    b.HasIndex("Video");

                    b.HasIndex("VirtualTrainer");

                    b.ToTable("Trainerlection", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RoleUser")
                        .HasColumnType("int");

                    b.Property<string>("Surename")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Usergroup")
                        .HasColumnType("int")
                        .HasColumnName("usergroup");

                    b.HasKey("Id")
                        .HasName("PK__Users__3213E83FA73B7049");

                    b.HasIndex("RoleUser");

                    b.HasIndex("Usergroup");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("mvstwo.Model.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Video__3213E83F3D739B2E");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.VirtualTrainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionCase")
                        .HasColumnType("text");

                    b.Property<int>("Eom")
                        .HasColumnType("int")
                        .HasColumnName("eom");

                    b.HasKey("Id")
                        .HasName("PK__VirtualT__3213E83FA33425F6");

                    b.HasIndex("Eom");

                    b.ToTable("VirtualTrainer", (string)null);
                });

            modelBuilder.Entity("mvstwo.Model.Answer", b =>
                {
                    b.HasOne("mvstwo.Model.Image", "ImageNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("Image")
                        .HasConstraintName("FK__Answers__Image__6D0D32F4");

                    b.HasOne("mvstwo.Model.Quest", "QuestNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("Quest")
                        .HasConstraintName("FK__Answers__Quest__6C190EBB");

                    b.Navigation("ImageNavigation");

                    b.Navigation("QuestNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.Cok", b =>
                {
                    b.HasOne("mvstwo.Model.User", "IdTeacherNavigation")
                        .WithMany("Coks")
                        .HasForeignKey("IdTeacher")
                        .IsRequired()
                        .HasConstraintName("FK__Coks__idTeacher__3F466844");

                    b.Navigation("IdTeacherNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.Content", b =>
                {
                    b.HasOne("mvstwo.Model.Cok", "IdCoksNavigation")
                        .WithMany("Contents")
                        .HasForeignKey("IdCoks")
                        .IsRequired()
                        .HasConstraintName("FK__Content__idCoks__46E78A0C");

                    b.HasOne("mvstwo.Model.Eom", "IdEom1Navigation")
                        .WithMany("ContentIdEom1Navigations")
                        .HasForeignKey("IdEom1")
                        .IsRequired()
                        .HasConstraintName("FK__Content__idEOM1__47DBAE45");

                    b.HasOne("mvstwo.Model.Eom", "IdEom2Navigation")
                        .WithMany("ContentIdEom2Navigations")
                        .HasForeignKey("IdEom2")
                        .IsRequired()
                        .HasConstraintName("FK__Content__idEOM2__48CFD27E");

                    b.HasOne("mvstwo.Model.Eom", "IdEom3Navigation")
                        .WithMany("ContentIdEom3Navigations")
                        .HasForeignKey("IdEom3")
                        .IsRequired()
                        .HasConstraintName("FK__Content__idEOM3__49C3F6B7");

                    b.Navigation("IdCoksNavigation");

                    b.Navigation("IdEom1Navigation");

                    b.Navigation("IdEom2Navigation");

                    b.Navigation("IdEom3Navigation");
                });

            modelBuilder.Entity("mvstwo.Model.FreeAnswer", b =>
                {
                    b.HasOne("mvstwo.Model.Quest", "IdQuestNavigation")
                        .WithMany("FreeAnswers")
                        .HasForeignKey("IdQuest")
                        .IsRequired()
                        .HasConstraintName("FK__FreeAnswe__idQue__7D439ABD");

                    b.HasOne("mvstwo.Model.ResultsTest", "IdResultsNavigation")
                        .WithMany("FreeAnswers")
                        .HasForeignKey("IdResults")
                        .IsRequired()
                        .HasConstraintName("FK__FreeAnswe__idRes__7C4F7684");

                    b.Navigation("IdQuestNavigation");

                    b.Navigation("IdResultsNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.KeyWord", b =>
                {
                    b.HasOne("mvstwo.Model.Cok", "IdCoksNavigation")
                        .WithMany("KeyWords")
                        .HasForeignKey("IdCoks")
                        .IsRequired()
                        .HasConstraintName("FK__KeyWords__idCoks__4222D4EF");

                    b.Navigation("IdCoksNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.Lection", b =>
                {
                    b.HasOne("mvstwo.Model.Eom", "EomNavigation")
                        .WithMany("Lections")
                        .HasForeignKey("Eom")
                        .IsRequired()
                        .HasConstraintName("FK__Lection__eom__5165187F");

                    b.HasOne("mvstwo.Model.Image", "IconNavigation")
                        .WithMany("Lections")
                        .HasForeignKey("Icon")
                        .HasConstraintName("FK__Lection__icon__5070F446");

                    b.Navigation("EomNavigation");

                    b.Navigation("IconNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.LectionBlock", b =>
                {
                    b.HasOne("mvstwo.Model.Lection", "IdLectionNavigation")
                        .WithMany("LectionBlocks")
                        .HasForeignKey("IdLection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LectionBl__idLec__5441852A");

                    b.HasOne("mvstwo.Model.Image", "ImageNavigation")
                        .WithMany("LectionBlocks")
                        .HasForeignKey("Image")
                        .HasConstraintName("FK__LectionBl__Image__5535A963");

                    b.HasOne("mvstwo.Model.Video", "VideoNavigation")
                        .WithMany("LectionBlocks")
                        .HasForeignKey("Video")
                        .HasConstraintName("FK__LectionBl__Video__5629CD9C");

                    b.Navigation("IdLectionNavigation");

                    b.Navigation("ImageNavigation");

                    b.Navigation("VideoNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.Quest", b =>
                {
                    b.HasOne("mvstwo.Model.Image", "ImageNavigation")
                        .WithMany("Quests")
                        .HasForeignKey("Image")
                        .HasConstraintName("FK__Quest__Image__68487DD7");

                    b.HasOne("mvstwo.Model.Test", "TestNavigation")
                        .WithMany("Quests")
                        .HasForeignKey("Test")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Quest__Test__693CA210");

                    b.Navigation("ImageNavigation");

                    b.Navigation("TestNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.ResultsTest", b =>
                {
                    b.HasOne("mvstwo.Model.Eom", "EomNavigation")
                        .WithMany("ResultsTests")
                        .HasForeignKey("Eom")
                        .IsRequired()
                        .HasConstraintName("FK__ResultsTest__eom__797309D9");

                    b.HasOne("mvstwo.Model.User", "IdUserNavigation")
                        .WithMany("ResultsTests")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__ResultsTe__idUse__787EE5A0");

                    b.Navigation("EomNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.TestAccordBlock", b =>
                {
                    b.HasOne("mvstwo.Model.Image", "FirstImageNavigation")
                        .WithMany("TestAccordBlockFirstImageNavigations")
                        .HasForeignKey("FirstImage")
                        .HasConstraintName("FK__TestAccor__first__6FE99F9F");

                    b.HasOne("mvstwo.Model.Image", "SecondImageNavigation")
                        .WithMany("TestAccordBlockSecondImageNavigations")
                        .HasForeignKey("SecondImage")
                        .HasConstraintName("FK__TestAccor__Secon__70DDC3D8");

                    b.HasOne("mvstwo.Model.Test", "TestNavigation")
                        .WithMany("TestAccordBlocks")
                        .HasForeignKey("Test")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TestAccord__Test__71D1E811");

                    b.Navigation("FirstImageNavigation");

                    b.Navigation("SecondImageNavigation");

                    b.Navigation("TestNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.TestBlock", b =>
                {
                    b.HasOne("mvstwo.Model.Image", "ImageNavigation")
                        .WithMany("TestBlocks")
                        .HasForeignKey("Image")
                        .HasConstraintName("FK__TestBlock__Image__628FA481");

                    b.HasOne("mvstwo.Model.Test", "TestNavigation")
                        .WithMany("TestBlocks")
                        .HasForeignKey("Test")
                        .IsRequired()
                        .HasConstraintName("FK__TestBlock__Test__656C112C");

                    b.HasOne("mvstwo.Model.Video", "VideoNavigation")
                        .WithMany("TestBlocks")
                        .HasForeignKey("Video")
                        .HasConstraintName("FK__TestBlock__Video__6383C8BA");

                    b.HasOne("mvstwo.Model.VirtualTrainer", "VirtualTrainerNavigation")
                        .WithMany("TestBlocks")
                        .HasForeignKey("VirtualTrainer")
                        .IsRequired()
                        .HasConstraintName("FK__TestBlock__Virtu__6477ECF3");

                    b.Navigation("ImageNavigation");

                    b.Navigation("TestNavigation");

                    b.Navigation("VideoNavigation");

                    b.Navigation("VirtualTrainerNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.TestSequenceBlock", b =>
                {
                    b.HasOne("mvstwo.Model.Image", "ImageNavigation")
                        .WithMany("TestSequenceBlocks")
                        .HasForeignKey("Image")
                        .HasConstraintName("FK__TestSeque__Image__74AE54BC");

                    b.HasOne("mvstwo.Model.Test", "TestNavigation")
                        .WithMany("TestSequenceBlocks")
                        .HasForeignKey("Test")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TestSequen__Test__75A278F5");

                    b.Navigation("ImageNavigation");

                    b.Navigation("TestNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.Trainerlection", b =>
                {
                    b.HasOne("mvstwo.Model.Image", "ImageNavigation")
                        .WithMany("Trainerlections")
                        .HasForeignKey("Image")
                        .HasConstraintName("FK__Trainerle__Image__5BE2A6F2");

                    b.HasOne("mvstwo.Model.Video", "VideoNavigation")
                        .WithMany("Trainerlections")
                        .HasForeignKey("Video")
                        .HasConstraintName("FK__Trainerle__Video__5CD6CB2B");

                    b.HasOne("mvstwo.Model.VirtualTrainer", "VirtualTrainerNavigation")
                        .WithMany("Trainerlections")
                        .HasForeignKey("VirtualTrainer")
                        .IsRequired()
                        .HasConstraintName("FK__Trainerle__Virtu__5DCAEF64");

                    b.Navigation("ImageNavigation");

                    b.Navigation("VideoNavigation");

                    b.Navigation("VirtualTrainerNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.User", b =>
                {
                    b.HasOne("mvstwo.Model.Role", "RoleUserNavigation")
                        .WithMany("Users")
                        .HasForeignKey("RoleUser")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleUser__3B75D760");

                    b.HasOne("mvstwo.Model.Group", "UsergroupNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Usergroup")
                        .HasConstraintName("FK__Users__usergroup__3C69FB99");

                    b.Navigation("RoleUserNavigation");

                    b.Navigation("UsergroupNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.VirtualTrainer", b =>
                {
                    b.HasOne("mvstwo.Model.Eom", "EomNavigation")
                        .WithMany("VirtualTrainers")
                        .HasForeignKey("Eom")
                        .IsRequired()
                        .HasConstraintName("FK__VirtualTrai__eom__59063A47");

                    b.Navigation("EomNavigation");
                });

            modelBuilder.Entity("mvstwo.Model.Cok", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("KeyWords");
                });

            modelBuilder.Entity("mvstwo.Model.Eom", b =>
                {
                    b.Navigation("ContentIdEom1Navigations");

                    b.Navigation("ContentIdEom2Navigations");

                    b.Navigation("ContentIdEom3Navigations");

                    b.Navigation("Lections");

                    b.Navigation("ResultsTests");

                    b.Navigation("VirtualTrainers");
                });

            modelBuilder.Entity("mvstwo.Model.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("mvstwo.Model.Image", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("LectionBlocks");

                    b.Navigation("Lections");

                    b.Navigation("Quests");

                    b.Navigation("TestAccordBlockFirstImageNavigations");

                    b.Navigation("TestAccordBlockSecondImageNavigations");

                    b.Navigation("TestBlocks");

                    b.Navigation("TestSequenceBlocks");

                    b.Navigation("Trainerlections");
                });

            modelBuilder.Entity("mvstwo.Model.Lection", b =>
                {
                    b.Navigation("LectionBlocks");
                });

            modelBuilder.Entity("mvstwo.Model.Quest", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("FreeAnswers");
                });

            modelBuilder.Entity("mvstwo.Model.ResultsTest", b =>
                {
                    b.Navigation("FreeAnswers");
                });

            modelBuilder.Entity("mvstwo.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("mvstwo.Model.Test", b =>
                {
                    b.Navigation("Quests");

                    b.Navigation("TestAccordBlocks");

                    b.Navigation("TestBlocks");

                    b.Navigation("TestSequenceBlocks");
                });

            modelBuilder.Entity("mvstwo.Model.User", b =>
                {
                    b.Navigation("Coks");

                    b.Navigation("ResultsTests");
                });

            modelBuilder.Entity("mvstwo.Model.Video", b =>
                {
                    b.Navigation("LectionBlocks");

                    b.Navigation("TestBlocks");

                    b.Navigation("Trainerlections");
                });

            modelBuilder.Entity("mvstwo.Model.VirtualTrainer", b =>
                {
                    b.Navigation("TestBlocks");

                    b.Navigation("Trainerlections");
                });
#pragma warning restore 612, 618
        }
    }
}
