@model mvstwo.Model.OkeiSiteContext;
@{
    int nowPageTest = ViewBag.nowPage;
    int a = ViewBag.IdCok;
    int nowscore = ViewBag.score;
    int eom = @Model.Eoms.FirstOrDefault
                    (q => q.Id == @Model.Contents.FirstOrDefault
                        (q => q.IdCoks == @Model.Coks.FirstOrDefault
                            (q => q.Id == a).Id).IdEom2).Id;
    mvstwo.Model.Cok cok = Model.Coks.FirstOrDefault(q => q.Id == a);
    mvstwo.Model.VirtualTrainer virt = Model.VirtualTrainers.Where(q => q.Eom == eom).ToList()[nowPageTest];
    mvstwo.Model.TestBlock testBlock = Model.TestBlocks.FirstOrDefault(q => q.VirtualTrainer == virt.Id);
    mvstwo.Model.Test test = Model.Tests.FirstOrDefault(q => q.Id == testBlock.Test);
    mvstwo.Model.Quest quest = Model.Quests.FirstOrDefault(q => q.Test == test.Id);
    mvstwo.Model.TestAccordBlock accordBlock = Model.TestAccordBlocks.FirstOrDefault(q => q.Test == test.Id);
    mvstwo.Model.TestSequenceBlock sequenceBlock = Model.TestSequenceBlocks.FirstOrDefault(q => q.Test == test.Id);
    nowPageTest++;
    int i = 1, k = 1, j = 1;
    char[] sti = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'K' };
}   

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Site</title>
    <link rel="stylesheet" href="/css/place.css">

</head>

<body>
    <form id="fooForm" asp-controller="Cokmain" asp-action="cok" method="post">
    <input type="number" name="IdCok" value="@a" readonly hidden>
    <a  href="#" id="submit_link" class="back">На Главную</a>
    </form>
    <script>
                            document.getElementById('submit_link').addEventListener('click', function (event) {
                                event.preventDefault(); // предотвращаем действие по умолчанию, чтобы страница не перезагружалась

                                // отправляем форму
                                document.getElementById('fooForm').submit();
                            });
                        </script>
    @if (quest == null)
    {
        <text>
            <div class="block" hidden>
        </text>
    }
    else
    {
        <text>
            <div class="block">
        </text>
    }
    <h2>@cok.Theme</h2>
        <main class="main">


            <div class="place__header">

                <div class="head__content" id="head"><h2>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ut ducimus odit accusamus, illum quas magni provident odio praesentium commodi sint, porro harum, minus cupiditate architecto culpa aut ex dolore officia.</h2></div>
                <div class="quiz__footer">
                    <div class="footer__content" id="pages">@(nowPageTest)/@Model.VirtualTrainers.Where(q => q.Eom == eom).Count()</div>
                </div>
            </div>


            <hr>

            <div class="quiz__body" style="margin-top: 170px;">
                <div class="buttons">
                    <!--<div class="inner">-->
                    <div class="buttons__content" id="buttons">
                        <button class="button">Default button</button><br>
                        <button class="button button_wrong">Wrong answer</button><br>
                        <button class="button button_correct">Correct answer</button><br>
                        <button class="button button_passive">Unclicked button</button><br>
                    </div>
                </div>


            </div>

    </div>

    <!-- <button class="place__back">На шаг назад</button>
    <button class="place__back">Ответить</button>  -->
    <div></div>

    <div></div>

    </main>

    </div>
    @if (accordBlock != null)
    {
        <div class="block">
            <h2>@cok.Theme</h2>
            <div class="place__header">
                <p class="head__content">@virt.DescriptionCase</p>
                <div class="spanline"><span>@(nowPageTest)/@Model.VirtualTrainers.Where(q => q.Eom == eom).Count()</span></div>
            </div>
            <div class="place__body">
                <div class="containerp">
                    <div class="column" id="column1">
                         @foreach (mvstwo.Model.TestAccordBlock testAccord in Model.TestAccordBlocks.Where(q => q.Test == test.Id))
                        {
                            <div class="item" id=@($"item{k}") draggable="true">@testAccord.FirstPhrase<div class="dot dot-right"></div></div>
                            k++;
                        }
                        
                    </div>
                    <div class="column" id="column2">
                         @foreach (mvstwo.Model.TestAccordBlock testAccord in Model.TestAccordBlocks.Where(q => q.Test == test.Id))
                        {
                            <div class="item" id=@($"item{sti[i-1]}") draggable="true"><div class="dot dot-left">@testAccord.SecondPhrase</div></div>
                            i++;
                        }
                    </div>
                    <svg id="lines" class="line1"></svg>
                </div>

                <div class="button-container">
                </div>

                <script>
                    let connections = {};

                    let correctAnswersCount = 0;
                    let score12 = 0;
                    var queryString = window.location.search;
                    var urlParams = new URLSearchParams(queryString);

                    var additionalScore = parseInt(urlParams.get('score')) || 0;
                    if (score12 === 0) {
                        score12 = additionalScore;
                    }

                    // Функция для проверки ответов
                    function checkAnswers() {
                        const pairs = [
                            ['item1', 'itemA'],
                            ['item2', 'itemB'],
                            ['item3', 'itemC'],
                            ['item4', 'itemD']
                        ];
                       document.getElementById('nextButton').hidden = false;

                        pairs.forEach(pair => {
                        const item1 = pair[0];
                        const item2 = pair[1];

                        const element1 = document.getElementById(item1);
                        const element2 = document.getElementById(item2);

                        element1.style.backgroundColor = '#f7f7f7';
                        element2.style.backgroundColor = '#f7f7f7';

                        if (connections[item1] === item2 && connections[item2] === item1) {
                            element1.style.backgroundColor = '#8dff8d';
                            element2.style.backgroundColor = '#8dff8d';

                            // Увеличиваем счетчик правильных ответов
                            correctAnswersCount++;
                        } else {
                            element1.style.backgroundColor = '#ff8d8d'; // Неверный ответ, красный цвет
                            element2.style.backgroundColor = '#ff8d8d';
                        }
                    });
                        var gh = 1;
                        gh = document.getElementById('scorein').value;
                       
                        // Проверяем, все ли ответы верны
                        if (correctAnswersCount === pairs.length) {
                            
                            
                        }
                        gh++;
                            document.getElementById('scorein').value++;
                        console.log('Текущий score:', gh);
                        document.getElementById('nextButton').hidden = false;
                    }


                    let draggedItem = null;
                    let lines = document.getElementById('lines');

                    document.addEventListener('drag', (event) => {
                        event.preventDefault();
                    });

                    document.addEventListener('dragstart', (event) => {
                        draggedItem = event.target;
                        event.dataTransfer.setData('text/plain', null);
                    });

                    document.addEventListener('dragover', (event) => {
                        event.preventDefault();
                    });


                    document.addEventListener('drop', (event) => {
                        event.preventDefault();
                        const target = event.target;

                        if (target.classList.contains('item') && target !== draggedItem) {
                            const isDraggingRightToLeft = target.offsetLeft < draggedItem.offsetLeft;

                            const startX = isDraggingRightToLeft ? draggedItem.offsetLeft : draggedItem.offsetLeft + draggedItem.clientWidth;
                            const startY = draggedItem.offsetTop + draggedItem.clientHeight / 2;
                            const endX = isDraggingRightToLeft ? target.offsetLeft + target.clientWidth : target.offsetLeft;
                            const endY = target.offsetTop + target.clientHeight / 2;

                            if (!connections[target.id] && !connections[draggedItem.id]) {
                                connections[draggedItem.id] = target.id;
                                connections[target.id] = draggedItem.id;

                                const line = document.createElementNS("http://www.w3.org/2000/svg", "line");

                                line.setAttribute("x1", startX.toString());
                                line.setAttribute("y1", startY.toString());
                                line.setAttribute("x2", endX.toString());
                                line.setAttribute("y2", endY.toString());
                                lines.appendChild(line);
                            }
                        }
                    });
                    function restartPage() {
                        location.reload(true); // true - для обновления с использованием кэширования
                    }
                </script>

            </div>
        </div>
    }
    @if (sequenceBlock != null)
    {
        <div class="block">
            <h2>@cok.Theme</h2>
            <div class="place__header">
                <p class="head__content">@virt.DescriptionCase</p>

                <div class="spanline"><span>@(nowPageTest)/@Model.VirtualTrainers.Where(q => q.Eom == eom).Count()</span></div>
            </div>
            <div class="place__body">
                <div class="containero">
                    
                        <div class="placeholders">
                         @foreach (mvstwo.Model.TestSequenceBlock testSequence in Model.TestSequenceBlocks.Where(q => q.Test == test.Id))
                        {
                            <div class="placeholder" id=@($"placeholder{k}") ondragover="allowDrop(event)" ondrop="drop(event)">@testSequence.Phrase@{
                            k++; 
                        } </div>
                       
                        }
                        </div>
                        <div class="tiles"> 
                            @foreach (mvstwo.Model.TestSequenceBlock testSequence in Model.TestSequenceBlocks.Where(q => q.Test == test.Id))
                        {
                            <div class="tile tile1" id=@($"tile{i}") draggable="true" ondragstart="drag(event)">@testSequence.Number@{
                            i++; 
                        }</div>}
                            
                        </div>
                    
                 

            </div>

            <script>
                let score12 = 0;
                var queryString = window.location.search;
                var urlParams = new URLSearchParams(queryString);

                var additionalScore = parseInt(urlParams.get('score')) || 0;
                if (score12 === 0) {
                    score12 = additionalScore;
                }

                function allowDrop(ev) {
                    ev.preventDefault();
                }

                function drag(ev) {
                    ev.dataTransfer.setData("text", ev.target.id);
                }

                function drop(ev) {
                    ev.preventDefault();
                    var data = ev.dataTransfer.getData("text");
                    var draggedElement = document.getElementById(data);
                    var placeholder = ev.target;
                    placeholder.appendChild(draggedElement);

                    draggedElement.style.position = 'absolute';
                    draggedElement.style.top = '0';
                    draggedElement.style.left = '0';

                    var rect = placeholder.getBoundingClientRect();
                    var tileRect = draggedElement.getBoundingClientRect();
                    draggedElement.style.top = (rect.top - tileRect.top) + 'px';
                    draggedElement.style.left = (rect.left - tileRect.left) + 'px';
                }

                function checkAnswers() {
                    var allAnswersCorrect = true;
                    var placeholders = document.querySelectorAll('.placeholder');
                    var tiles = document.querySelectorAll('.tile');

                    // Сначала перекрашиваем все плашки и места в красный
                    tiles.forEach(function (tile) {
                        tile.classList.add('incorrect');
                    });

                    placeholders.forEach(function (placeholder) {
                        placeholder.classList.add('incorrect');
                    });

                    // Затем перекрашиваем правильные в зелёный
                    placeholders.forEach(function (placeholder, index) {
                        var tile = placeholder.querySelector('.tile');

                        if (tile && tile.id === 'tile' + (index + 1) && tile.parentElement) {
                            tile.classList.remove('incorrect');
                            tile.classList.add('correct');
                            placeholder.classList.remove('incorrect');

                        }
                        else {

                            allAnswersCorrect = false;
                        }


                    });
                    
                    if (allAnswersCorrect) {
                        score12++;
                         
                        document.getElementById("scorein").value = score12;
                    }
                    console.log('Score:', score12);
                    // Перекрашиваем неиспользованные плашки в красный
                    tiles.forEach(function (tile) {
                        if (!tile.parentElement) {
                            tile.classList.add('unused');
                        }
                    });
                    document.getElementById('nextButton').hidden = false;
                    document.getElementById('clek').hidden = true;
                }
                function restartPage() {
                    location.reload(true); // true - для обновления с использованием кэширования
                }
            </script>
        </div>
    </div>
    }

    <footer>
        <div class="line">
            <div class="timer">
                <p id="timer"><span id="minutes">00</span>:<span id="seconds">00</span></p>
                
            </div>
            <button onclick="checkAnswers()" class="place__back" id="clek">Ответить</button>
            @if(nowPageTest == @Model.VirtualTrainers.Where(q => q.Eom == eom).Count())
            {
                <form id="fooForm" asp-controller="Cokmain" asp-action="cok">
                <button class="place__btn" id="nextButton" value="Закончить" hidden>Закончить</button>
                <input type="number" name="IdCok" value="@a" readonly hidden>
                <input type="number" name="nowquiz" value="@nowPageTest" readonly hidden>
                <input id="scorein" type="number" name="score" value="@ViewBag.score" hidden readonly >
                <input id="minute" type="number" name="timeMinute" readonly hidden>
                <input id="second" type="number" name="timeSecond" readonly hidden>
            </form>
            }
            else
            {
                <form id="fooForm" asp-controller="Cokmain" asp-action="Trainer" method="get">
                <button class="place__btn" id="nextButton" hidden>Далее</button>
                <input type="number" name="IdCok" value="@a" readonly hidden>
                <input type="number" name="nowquiz" value="@nowPageTest" readonly hidden>
                <input id="scorein" type="number" name="score" value="@ViewBag.score" hidden readonly >
                <input id="minute" type="number" name="timeMinute" value="@ViewBag.minute" readonly hidden>
                    <input id="second" type="number" name="timeSecond" value="@ViewBag.second" readonly hidden>
            </form>
            }
            

            <script>
                const headElem = document.getElementById("head");
                const buttonsElem = document.getElementById("buttons");
                const pagesElem = document.getElementById("pages");
                const nextButton = document.getElementById("nextButton");
                let timeMinute;
                let timeSecond;

                // Добавляем обработчик события click
                nextButton.addEventListener("click", function () {
                    // Вызываем функцию Next() из объекта quiz

                    quiz.Next();
                    quiz.current--;

                    // Обновляем содержимое страницы
                    Update();
                });

                //Класс, который представляет сам тест
                class Quiz {
                    constructor(type, questions, results) {
                        //Тип теста: 1 - классический тест с правильными ответами, 2 - тест без правильных ответов
                        this.type = type;

                        //Массив с вопросами
                        this.questions = questions;

                        //Массив с возможными результатами
                        this.results = results;

                        //Количество набранных очков
                        this.score = 0;

                        //Номер результата из массива
                        this.result = 0;

                        //Номер текущего вопроса
                        this.current = 0;
                    }

                    Click(index) {
                        //Добавляем очки
                        let value = this.questions[this.current].Click(index);
                        this.score += value;

                        let correct = -1;

                        //Если было добавлено хотя одно очко, то считаем, что ответ верный
                        if (value >= 1) {
                            correct = index;
                        }
                        else {
                            //Иначе ищем, какой ответ может быть правильным
                            for (let i = 0; i < this.questions[this.current].answers.length; i++) {
                                if (this.questions[this.current].answers[i].value >= 1) {
                                    correct = i;
                                    break;
                                }
                            }
                        }

                        this.Next();

                        return correct;
                    }

                    //Переход к следующему вопросу
                    Next() {
                        this.current++;

                        if (this.current >= this.questions.length) {
                            this.End();
                        }

                    }

                    //Если вопросы кончились, этот метод проверит, какой результат получил пользователь
                    End() {
                        for (let i = 0; i < this.results.length; i++) {
                            if (this.results[i].Check(this.score)) {
                                this.result = i;
                            }
                        }
                    }
                }

                //Класс, представляющий вопрос
                class Question {
                    constructor(text, answers) {
                        this.text = text;
                        this.answers = answers;
                    }

                    Click(index) {
                        return this.answers[index].value;
                    }
                }

                //Класс, представляющий ответ
                class Answer {
                    constructor(text, value) {
                        this.text = text;
                        this.value = value;
                    }
                }

                //Класс, представляющий результат
                class Result {
                    constructor(text, value) {
                        this.text = text;
                        this.value = value;
                    }

                    //Этот метод проверяет, достаточно ли очков набрал пользователь
                    Check(value) {
                        if (this.value <= value) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }

                //Массив с результатами
                const results =
                    [
                        new Result("Вам многому нужно научиться", 0),
                        new Result("Вы уже неплохо разбираетесь", 2),
                        new Result("Ваш уровень выше среднего", 4),
                        new Result("Вы в совершенстве знаете тему", 6)
                    ];

                // Массив с вопросами
                @if(@quest != null){
                    <text>
                const questions = [
                new Question("@quest.TextQuest",
                [@foreach(mvstwo.Model.Answer answer in Model.Answers.Where(q => q.Quest == quest.Id))
                {
                <text>
                new Answer("@Html.Raw(@answer.TextAnswers)", @if (@answer.IsCorrect == true)
                {
                <text>
                1 </text>
                }
                else
                {
                <text>
                0 </text>
                }
                ),
                </text>
                }
                ])
                ];</text>
            }
            else
            {<text>
               const questions = [
                  new Question("1+1=", 
                  [
                    new Answer("1", 0),
                    new Answer("3", 0),
                    new Answer("2", 1),
                    new Answer("6", 0),
                  ])
                ];
            </text>
            }

                //Сам тест
                const quiz = new Quiz(1, questions, results);

                Update();

                //Обновление теста
                function Update() {
                    @if (quest != null)
                    {
                        <text>
                            document.getElementById("scorein").value = quiz.score;
                        </text>
                    }
                        
                    //Проверяем, есть ли ещё вопросы
                    if (quiz.current < quiz.questions.length) {
                        if (quiz.current >= quiz.questions.length - 1) {
                            nextButton.innerHTML = "Далее";
                            
                            nextButton.addEventListener("click", function () {
                                // Перенаправить на страницу с результатами
                                window.location.href = "eom3/quiz1.html?score=" + quiz.score + "&timeMinute=" + timeMinute + "&timeSecond=" + timeSecond; // Замените на фактический URL вашей страницы с результатами
                            });
                        } else {
                            // Для других случаев (не последний вопрос) оставьте оригинальный текст "Далее" и обработчик события
                            nextButton.innerHTML = "Далее";
                            nextButton.addEventListener("click", function () {
                                quiz.Next();
                                quiz.current--;
                                Update();
                            });
                        }



                        //Если есть, меняем вопрос в заголовке
                        headElem.innerHTML = quiz.questions[quiz.current].text;

                        //Удаляем старые варианты ответов
                        buttonsElem.innerHTML = "";

                        //Создаём кнопки для новых вариантов ответов
                        for (let i = 0; i < quiz.questions[quiz.current].answers.length; i++) {
                            let btn = document.createElement("button");
                            btn.className = "button";

                            btn.innerHTML = quiz.questions[quiz.current].answers[i].text;

                            btn.setAttribute("index", i);

                            buttonsElem.appendChild(btn);
                        }

                        //Выводим номер текущего вопроса
                        

                        //Вызываем функцию, которая прикрепит события к новым кнопкам
                        Init();
                    }
                    else {//Если это конец, то выводим результат

                    }
                }

                function Init() {
                   var queryString = window.location.search;
			var urlParams = new URLSearchParams(queryString);
			
			// Получение значений переменных
			var score = parseInt(urlParams.get('score'));;
			var timeMinute = urlParams.get('timeMinute');
			var timeSecond = urlParams.get('timeSecond');
	
      quiz.score = score;
			document.getElementById('minutes').textContent = timeMinute;
			document.getElementById('seconds').textContent = timeSecond;
  //Находим все кнопки
  let btns = document.getElementsByClassName("button");

  for(let i = 0; i < btns.length; i++)
  {
    //Прикрепляем событие для каждой отдельной кнопки
    //При нажатии на кнопку будет вызываться функция Click()
    btns[i].addEventListener("click", function (e) { Click(e.target.getAttribute("index")); });
  }
                }

                function Click(index) {
                    //Получаем номер правильного ответа
                    let correct = quiz.Click(index);

                    //Находим все кнопки
                    let btns = document.getElementsByClassName("button");

                    //Делаем кнопки серыми
                    for (let i = 0; i < btns.length; i++) {
                        btns[i].className = "button button_passive";
                        btns[i].disabled = "disabled";
                    }

                    //Если это тест с правильными ответами, то мы подсвечиваем правильный ответ зелёным, а неправильный - красным
                    if (quiz.type == 1) {
                        if (correct >= 0) {
                            btns[correct].className = "button button_correct";
                            document.getElementById('nextButton').hidden = false;
                        }

                        if (index != correct) {
                            btns[index].className = "button button_wrong";
                            document.getElementById('nextButton').hidden = false;
                        }
                    }
                    else {
                        //Иначе просто подсвечиваем зелёным ответ пользователя
                        btns[index].className = "button button_correct";
                        document.getElementById('nextButton').hidden = false;
                    }

                    //Ждём секунду и обновляем тест

                }
                // Функция для обновления таймера
                function updateTimer() {
                    const minutesElement = document.getElementById('minutes');
                    const secondsElement = document.getElementById('seconds');

                    let minutes = parseInt(minutesElement.textContent);
                    let seconds = parseInt(secondsElement.textContent);

                    seconds++;
                    if (seconds === 60) {
                        minutes++;
                        seconds = 0;
                    }

                    minutesElement.textContent = minutes < 10 ? '0' + minutes : minutes;
                    secondsElement.textContent = seconds < 10 ? '0' + seconds : seconds;
                    timeMinute = minutes < 10 ? '0' + minutes : minutes;
                    timeSecond = seconds < 10 ? '0' + seconds : seconds;

                    document.getElementById('minute').value = timeMinute;
                    document.getElementById('second').value = timeSecond;
                }

                // Обновляем таймер каждую секунду
                const timerInterval = setInterval(updateTimer, 1000);

                // Инициализация таймера
                window.onload = function () {
                    updateTimer();
                };
            </script>
	</footer>


</body>
</html>